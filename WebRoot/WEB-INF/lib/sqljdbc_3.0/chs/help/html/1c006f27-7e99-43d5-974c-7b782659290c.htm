<html DIR="LTR" xmlns:tool="http://www.microsoft.com/tooltip" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>使用带有输出参数的存储过程</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/script.js">
      
    </script><script src="../local/script_main.js">&amp;nbsp;</script>
  </head>
  <body>
    <!--Topic built:04/01/2010 05:03:28-->

    
    
    
    
    
    
    
    
    
    <div id="header">
      <table width="100%" id="topTable"><tr>
          <td align="left">
            <span id="headerBold">使用带有输出参数的存储过程</span>
          </td>
          <td align="right">
            
          </td>
        </tr></table>
      
      
      
    </div>
    <div id="mainSection">
      
        
        
    <font color="DarkGray">
      
    </font>
    <p />
    
    <p />
  
        <div id="introductionSection" class="section">
    <p>您可以调用的 SQL Server 存储过程是返回一个或多个 OUT 参数的存储过程，存储过程使用这些参数将数据返回到调用它的应用程序。可以使用 Microsoft SQL Server JDBC 驱动程序提供的 <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a> 类，调用此类存储过程并处理其返回的数据。</p>
    <p>使用 JDBC 驱动程序调用此类存储过程时，必须结合 <a href="937292a6-1525-423e-a2b2-a18fd34c2893.htm">SQLServerConnection</a> 类的 <a href="265b024c-898a-4bd0-98b5-f06076717b9e.htm">prepareCall</a> 方法使用<code> call </code>SQL 转义序列。带有 OUT 参数的 <code>call</code> 转义序列的语法如下所示：</p>
    <p>
      <code>{call procedure-name[([parameter][,[parameter]]...)]}</code>
    </p>
    <div style="margin: .5em 1.5em .5em 1.5em"><b>注意：</b>
      有关 SQL 转义序列的详细信息，请参阅<a href="00f9e25a-088e-4ac6-aa75-43eacace8f03.htm">使用 SQL 转义序列</a>。<p />
    </div>
    <p>构造<code> call </code>转义序列时，请使用 ?（问号）字符来指定 OUT 参数。此字符充当要从该存储过程返回的参数值的占位符。要为 OUT 参数指定值，必须在运行存储过程前使用 <b>SQLServerCallableStatement</b> 类的 <a href="82f8d608-efc1-4af8-a985-ec25d19420aa.htm">registerOutParameter</a> 方法指定各参数的数据类型。</p>
    <p>使用 <b>registerOutParameter</b> 方法为 OUT 参数指定的值必须是 java.sql.Types 所包含的 JDBC 数据类型之一，而它又被映射成本地 SQL Server 数据类型之一。有关 JDBC 和 SQL Server 数据类型的详细信息，请参阅<a href="7802328d-4d23-4775-9573-4169b127d258.htm">了解 JDBC 驱动程序数据类型</a>。</p>
    <p>当您对于 OUT 参数向 <b>registerOutParameter</b> 方法传递一个值时，不仅必须指定要用于此参数的数据类型，而且必须在存储过程中指定此参数的序号位置或此参数的名称。例如，如果存储过程包含单个 OUT 参数，则其序数值为 1；如果存储过程包含两个参数，则第一个序数值为 1，第二个序数值为 2。</p>
    <div style="margin: .5em 1.5em .5em 1.5em"><b>注意：</b>
      JDBC 驱动程序不支持将 CURSOR、SQLVARIANT、TABLE 和 TIMESTAMP SQL Server 数据类型用作 OUT 参数。<p />
    </div>
    <p>作为实例，在 SQL Server 2005 AdventureWorks 示例数据库中创建以下存储过程：</p>
    <div class="sampleCode"><span codeLanguage="other"><pre>CREATE PROCEDURE GetImmediateManager
   @employeeID INT,
   @managerID INT OUTPUT
AS
BEGIN
   SELECT @managerID = ManagerID 
   FROM HumanResources.Employee 
   WHERE EmployeeID = @employeeID
END</pre></span></div>
    <p>根据指定的整数 IN 参数 (employeeID)，该存储过程也返回单个整数 OUT 参数 (managerID)。根据 HumanResources.Employee 表中包含的 EmployeeID，OUT 参数中返回的值为 ManagerID。</p>
    <p>在下面的实例中，将向此函数传递 AdventureWorks 示例数据库的打开连接，然后使用 <a href="e1367f39-23d7-4e26-b160-6d988d7e6988.htm">execute</a> 方法调用 GetImmediateManager 存储过程：</p>
    <div class="sampleCode"><span codeLanguage="other"><pre>public static void executeStoredProcedure(Connection con) {
   try {
      CallableStatement cstmt = con.prepareCall("{call dbo.GetImmediateManager(?, ?)}");
      cstmt.setInt(1, 5);
      cstmt.registerOutParameter(2, java.sql.Types.INTEGER);
      cstmt.execute();
      System.out.println("MANAGER ID: " + cstmt.getInt(2));
   }
   catch (Exception e) {
      e.printStackTrace();
   }
}</pre></span></div>
    <p>本示例使用序号位置来标识参数。或者，也可以使用参数的名称（而非其序号位置）来标识此参数。下面的代码示例修改了上一个示例，以说明如何在 Java 应用程序中使用命名参数。请注意，这些参数名称对应于存储过程的定义中的参数名称：</p>
    <div class="sampleCode"><span codeLanguage="other"><pre>public static void executeStoredProcedure(Connection con) {
   try {
      CallableStatement cstmt = con.prepareCall("{call dbo.GetImmediateManager(?, ?)}");
      cstmt.setInt("employeeID", 5);
      cstmt.registerOutParameter("managerID", java.sql.Types.INTEGER);
      cstmt.execute();
      System.out.println("MANAGER ID: " + cstmt.getInt("managerID"));
      cstmt.close();
   }
   catch (Exception e) {
      e.printStackTrace();
   }</pre></span></div>
    <p>}</p>
    <div style="margin: .5em 1.5em .5em 1.5em"><b>注意：</b>
      这些示例使用 <b>SQLServerCallableStatement</b> 类的 <b>execute</b> 方法来运行存储过程。使用此方法是因为存储过程也不会返回结果集。如果返回，则使用 <a href="599cf463-e19f-4baa-bacb-513cad7c6cd8.htm">executeQuery</a> 方法。<p />
    </div>
    <p>存储过程可能返回更新计数和多个结果集。Microsoft SQL Server JDBC 驱动程序遵循 JDBC 3.0 规范，此规范规定在检索 OUT 参数之前应检索多个结果集和更新计数。也就是说，应用程序应先检索所有 <b>ResultSet</b> 对象和更新计数，然后使用 <b>CallableStatement.getter</b> 方法检索 OUT 参数。否则，当检索 OUT 参数时，尚未检索的 <b>ResultSet</b> 对象和更新计数将丢失。有关更新计数和多个结果集的详细信息，请参阅<a href="64cf4877-5995-4bfc-8865-b7618a5c8d01.htm">使用带有更新计数的存储过程</a>和<a href="ab6a3cfa-073b-44e9-afca-a8675cfe5fd1.htm">使用多个结果集</a>。</p>
  </div><span id="seeAlsoSpan"><h1 class="heading">请参阅</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection"><a href="0041f9e1-09b6-4487-b052-afd636c8e89a.htm">使用带有存储过程的语句</a><br /><br /></div><!--[if gte IE 5]>
			<tool:tip element="seeAlsoToolTip" avoidmouse="false"/><tool:tip element="languageFilterToolTip" avoidmouse="false"/><tool:tip element="roleInfoSpan" avoidmouse="false"/>
		<![endif]-->
      <div id="footer" class="section">
        
		<hr />
		
		<span id="fb" class="feedbackcss">
			
			
		</span>
		
		<a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">
			
			© 2010 Microsoft Corporation。保留所有权利。
		</a>
 	
	
      </div>
    </div>
  </body>
</html>